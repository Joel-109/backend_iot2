// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
)

const getLastRisk = `-- name: GetLastRisk :one
SELECT created_at, risk 
FROM Risk
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastRisk(ctx context.Context) (Risk, error) {
	row := q.db.QueryRowContext(ctx, getLastRisk)
	var i Risk
	err := row.Scan(&i.CreatedAt, &i.Risk)
	return i, err
}

const getLastSensorValue = `-- name: GetLastSensorValue :one
SELECT created_at, temperature, gas, flame
FROM SensorValues 
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastSensorValue(ctx context.Context) (Sensorvalue, error) {
	row := q.db.QueryRowContext(ctx, getLastSensorValue)
	var i Sensorvalue
	err := row.Scan(
		&i.CreatedAt,
		&i.Temperature,
		&i.Gas,
		&i.Flame,
	)
	return i, err
}

const getRisks = `-- name: GetRisks :many
SELECT created_at, risk 
FROM Risk
ORDER BY created_at DESC
LIMIT ?
`

func (q *Queries) GetRisks(ctx context.Context, limit int64) ([]Risk, error) {
	rows, err := q.db.QueryContext(ctx, getRisks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Risk
	for rows.Next() {
		var i Risk
		if err := rows.Scan(&i.CreatedAt, &i.Risk); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorValues = `-- name: GetSensorValues :many
SELECT created_at, temperature, gas, flame
FROM SensorValues 
ORDER BY created_at DESC
LIMIT ?
`

func (q *Queries) GetSensorValues(ctx context.Context, limit int64) ([]Sensorvalue, error) {
	rows, err := q.db.QueryContext(ctx, getSensorValues, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sensorvalue
	for rows.Next() {
		var i Sensorvalue
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Temperature,
			&i.Gas,
			&i.Flame,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRisk = `-- name: InsertRisk :exec
INSERT INTO Risk (risk)
VALUES (?)
`

func (q *Queries) InsertRisk(ctx context.Context, risk int64) error {
	_, err := q.db.ExecContext(ctx, insertRisk, risk)
	return err
}

const insertSensorValues = `-- name: InsertSensorValues :exec
INSERT INTO SensorValues (temperature,gas,flame)
VALUES (?,?,?)
`

type InsertSensorValuesParams struct {
	Temperature float64
	Gas         int64
	Flame       bool
}

func (q *Queries) InsertSensorValues(ctx context.Context, arg InsertSensorValuesParams) error {
	_, err := q.db.ExecContext(ctx, insertSensorValues, arg.Temperature, arg.Gas, arg.Flame)
	return err
}
